THE H FILE:
// Fill out your copyright notice in the Description page of Project Settings.

#pragma once

#include "CoreMinimal.h"
#include "GameFramework/Actor.h"
#include "Item.generated.h"



UCLASS()
class SLASH_API AItem : public AActor
{
	GENERATED_BODY()
	
public:	
	AItem();
	virtual void Tick(float DeltaTime) override;



protected:
	virtual void BeginPlay() override;
	//UPROPERTY(EditAnywhere, BlueprintReadonly)
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Sine Parameters")
	float Amplitude;
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Sine Parameters")
	float TimeConstant;
	UFUNCTION(BlueprintPure)
	float TransformedSine(float InputValue);
	UFUNCTION(BlueprintPure)
	float TransformedCosine(float InputValue);

	template<typename T>
	T Average (T First, T Second);
private:
	UPROPERTY(VisibleAnywhere, BlueprintReadonly, meta = (AllowPrivateAccess = "true"))  //This line is the one that Stephen used, but I didn't think it was necessary
	float RunningTime;
	UPROPERTY(VisibleAnywhere)
	UStaticMeshComponent* ItemMesh;
};

template<typename T>
inline T AItem::Average(T First, T Second)
{
	return (First + Second) / 2;

}


THE CPP FILE:


// Fill out your copyright notice in the Description page of Project Settings.


#include "Items/Item.h"
#include "Slash/DebugMacros.h"
#include "Kismet/KismetMathLibrary.h"


#define THIRTY 30

AItem::AItem() : Amplitude(5.0f), TimeConstant(2.f)
{
	PrimaryActorTick.bCanEverTick = true;
	ItemMesh = CreateDefaultSubobject<UStaticMeshComponent>(TEXT("ItemMeshComponent"));
	RootComponent = ItemMesh;
}

void AItem::BeginPlay()
{

	Super::BeginPlay(); //This calls BP BeginPlay. How is BP_Item a super class of Item?

	UWorld* World = GetWorld();
	FVector Location = GetActorLocation();
	FVector Forward = GetActorForwardVector();


	int32 intTest = Average<int32>(2, 5);
	float floatTest = Average<float>(2, 5);
	FVector vectorTest = Average<FVector>(FVector(2, 4, 9), FVector(5, 6, 7));

	RunningTime = 0.f;

	UE_LOG(LogTemp, Warning, TEXT("Averages %i   %f   %s"), intTest, floatTest, *(vectorTest.ToString()));

}

void AItem::Tick(float DeltaTime)
{
	Super::Tick(DeltaTime);

	RunningTime += DeltaTime;	
}

float AItem::TransformedSine(float InputValue) {
	return Amplitude * FMath::Sin(InputValue * TimeConstant);
}

float AItem::TransformedCosine(float InputValue) {
	return Amplitude * FMath::Cos(InputValue * TimeConstant);
}
